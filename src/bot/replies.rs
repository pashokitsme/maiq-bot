use maiq_api_models::{utils, Fetch};
use teloxide::{
  payloads::SendMessageSetters,
  requests::Requester,
  types::{InlineKeyboardButton, InlineKeyboardMarkup, ParseMode},
};

use crate::{api, bot::format::SnapshotFormatterExt, db::Settings};

use super::{context::Context, get_next_day, BotResult};

impl Context {
  pub async fn start(&self) -> BotResult {
    self.mongo.get_or_new(self.user_id()).await?;
    let username = &self.user.first_name;
    self
      .reply(format!(
        r#"–ü—Ä–∏–≤–µ—Ç, <b>{username}</b>! üéâ
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –±–µ—Ç—ã.
–ñ–µ–ª–∞–µ—à—å –ø–æ–º–æ—á—å? –í /about –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ç—Ö–∞–±.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/–±–∞–≥–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏ <a href="https://t.me/pashokitsme">–µ–º—É</a>.

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º, —Å—Å—ã–ª–∫–∏:
<b>/about</b>"#
      ))
      .await?;
    Ok(())
  }

  pub async fn reply_about(&self) -> BotResult {
    macro_rules! url_buttons_column {
        ($(($name: literal, $url: literal)),*) => {
          InlineKeyboardMarkup::new(vec![$(vec![InlineKeyboardButton::url($name, reqwest::Url::parse($url).unwrap()); 1]),*])
        };
      }

    let markup = url_buttons_column!(("API docs", "https://github.com/pashokitsme/maiq-web-api"));

    self
        .send_message(
          self.chat_id(),
          r#"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
  
  ¬∑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_group. 
  –í –∞—Ä–≥—É–º–µ–Ω—Ç–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. 
  
  ¬∑ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏
      /toggle_notifications.
  
  ¬∑ [<code>g5q98alka3</code>] - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–Ω–∞–ø—à–æ—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –ø–æ –Ω–µ–º—É –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –í –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –æ—Å—Ç–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Å–Ω–∞–ø—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏, –¥—Ä—É–≥–∏–µ —Ç–µ–ø–µ—Ä—å (–ø–æ—Å–ª–µ 29.01.23) –∑–∞–º–µ–Ω—è—é—Ç—Å—è.
  
  ¬∑ –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –Ω–∞–ø–∏—Å–∞–Ω–æ <b>–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</b>, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–π <a href="https://t.me/pashokitsme">—Ç—É—Ç</a>.
  
  ¬∑ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –ª–µ–∂–∏—Ç –Ω–∞ <a href="https://github.com/pashokitsme">–≥–∏—Ç—Ö–∞–±–µ</a> –∏ —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ —Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
      1. <a href="https://github.com/pashokitsme/maiq-parser">–ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</a>.
      2. <a href="https://github.com/pashokitsme/maiq-web-api">–ë–µ–∫–µ–Ω–¥</a>.
      –ö—Å—Ç–∞—Ç–∏, API –ø—É–±–ª–∏—á–Ω–æ–µ (–Ω–æ —Å–µ—Ä–≤–µ—Ä, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–¥–µ-—Ç–æ –≤ us west).
      3. <a href="https://github.com/pashokitsme/maiq-bot">–ë–æ—Ç</a>.
  
  –ñ–¥—É –ø—É–ª–ª —Ä–µ–∫–≤–µ—Å—Ç—ã –∏/–∏–ª–∏ –∑–≤—ë–∑–¥–æ—á–∫–∏! üåü
  "#,
        )
        .parse_mode(ParseMode::Html)
        .reply_markup(markup)
        .await?;
    Ok(())
  }

  pub async fn reply_timetable(&self, fetch: Fetch) -> BotResult {
    let group = self
      .mongo
      .get_or_new(self.user_id())
      .await?
      .group
      .unwrap_or("UNSET".into());

    let date = match fetch {
      Fetch::Today => utils::now(0).date_naive(),
      Fetch::Next => get_next_day(),
    };

    match api::latest(fetch).await {
      Ok(s) => self.reply(s.format_or_default(&*group, date).await).await,
      Err(_) => self.reply_default(date).await,
    }
  }

  pub async fn dev_reply_user_list(&self) -> BotResult {
    let users = self.mongo.fetch_all().await?;
    let format = |u: &Settings| -> String {
      let r = match u.is_notifications_enabled {
        true => "[üü¢] ",
        false => "[üî¥] ",
      };

      format!(
        "{} {} [<a href=\"tg://user?id={}\">#{}</a>] —Å {}\n",
        r,
        u.group.as_ref().unwrap_or(&"no".into()),
        u.id,
        u.id,
        u.joined.to_chrono().format("%d/%m/%Y %H:%M:%S")
      )
    };

    let body = format!("–í—Å–µ–≥–æ: <b>{}</b>\n\n {}", users.len(), users.iter().map(format).collect::<String>());

    self.reply(body).await?;
    Ok(())
  }
}
