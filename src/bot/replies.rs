use chrono::{Datelike, NaiveDate};
use maiq_api_wrapper::api;
use maiq_shared::{utils::time::now, Fetch};
use teloxide::{
  payloads::SendMessageSetters,
  requests::Requester,
  types::{InlineKeyboardButton, InlineKeyboardMarkup, ParseMode},
};

use crate::{
  bot::format::{SnapshotFormatter, SnapshotFormatterExt},
  db::Settings,
  error::BotError,
};

use super::{
  callbacks::{Callback, CallbackKind},
  context::Context,
  format::DefaultFormatter,
  get_next_day, BotResult,
};

impl Context {
  pub async fn start(&self) -> BotResult {
    self.mongo.get_or_new(self.user_id()).await?;
    let username = &self.msg.from().unwrap().first_name;
    self
      .reply(format!(
        r#"–ü—Ä–∏–≤–µ—Ç, <b>{username}</b>! üéâ
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –±–µ—Ç—ã.
–ñ–µ–ª–∞–µ—à—å –ø–æ–º–æ—á—å? –í /about –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ç—Ö–∞–±.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/–±–∞–≥–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏ <a href="https://t.me/pashokitsme">–µ–º—É</a>.

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º, —Å—Å—ã–ª–∫–∏ - –≤—Å—ë —Ç–∞–∫ –∂–µ: /about"#
      ))
      .await?;
    Ok(())
  }

  pub async fn reply_about(&self) -> BotResult {
    macro_rules! url_buttons_column {
        ($(($name: literal, $url: literal)),*) => {
          InlineKeyboardMarkup::new(vec![$(vec![InlineKeyboardButton::url($name, reqwest::Url::parse($url).unwrap()); 1]),*])
        };
      }

    let markup = url_buttons_column!(("API docs", "https://github.com/pashokitsme/maiq-web-api"));

    self
        .send_message(
          self.chat_id(),
          r#"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
  
  ¬∑ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –ª–µ–∂–∏—Ç –Ω–∞ <a href="https://github.com/pashokitsme">–≥–∏—Ç—Ö–∞–±–µ</a> –∏ —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ 3 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ñ–¥—É üåü –∏/–∏–ª–∏ –ø—É–ª–ª —Ä–µ–∫–≤–µ—Å—Ç—ã 

  ¬∑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_group. –í –∞—Ä–≥—É–º–µ–Ω—Ç–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. 

  ¬∑ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ /toggle_notifications.

  ¬∑ –ë–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç, –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±—É–¥—É—Ç, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–µ—Ç
  
  ¬∑ –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –Ω–∞–ø–∏—Å–∞–Ω–æ <b>–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</b>, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–π <a href="https://t.me/pashokitsme">—Ç—É—Ç</a>.

  ¬∑ [<code>g5q98alka3</code>] - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤—Å–µ–≥–æ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ), –ø–æ –Ω–µ–º—É –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –æ—Å—Ç–∞—ë—Ç—Å—è –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏, –¥—Ä—É–≥–∏–µ (–ø–æ—Å–ª–µ 29.01.23) –∑–∞–º–µ–Ω—è—é—Ç—Å—è. –ü–æ —Å—É—Ç–∏ - —É–∂–µ –Ω–µ –æ—á–µ–Ω—å —Ç–æ –Ω—É–∂–Ω–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
  "#,
        )
        .parse_mode(ParseMode::Html)
        .reply_markup(markup)
        .await?;
    Ok(())
  }

  pub async fn reply_timetable(&self, fetch: Fetch) -> BotResult {
    let group = self.mongo.get_or_new(self.user_id()).await?.group;

    let group = match group {
      Some(g) => g,
      None => return self.reply("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É").await.map(|_| ()),
    };

    let date = match fetch {
      Fetch::Today => now().date_naive(),
      Fetch::Next => get_next_day(),
    };

    match api::latest(fetch).await {
      Ok(s) => self.reply(s.format_or_default(&group, date).await).await,
      Err(_) => self.reply_default(date).await,
    }
  }

  pub async fn reply_default(&self, date: NaiveDate) -> BotResult {
    match self.mongo.get_or_new(self.user_id()).await?.group {
      Some(g) => self.reply(api::default(&g, date.weekday()).await.format(date)).await,
      None => self.reply("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É").await.map(|_| ()),
    }
  }

  pub async fn reply_dated_snapshot(&self, rawdate: &str) -> BotResult {
    fn parse_date(rawdate: &str) -> Result<NaiveDate, ()> {
      let mut slice = rawdate.split('.');
      macro_rules! parse {
        () => {
          slice.next().and_then(|x: &str| x.parse().ok()).ok_or(())?
        };
      }
      let (d, m, y) = (parse!(), parse!(), parse!());
      NaiveDate::from_ymd_opt(y, m, d).ok_or(())
    }

    let group = match self.mongo.get_or_new(self.user_id()).await?.group {
      Some(g) => g,
      None => return self.reply("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É").await.map(|_| ()),
    };

    let date =
      parse_date(rawdate).map_err(|_| BotError::invalid_command("/date", "/date [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ d.m.Y]", "/date 11.02.2023"))?;

    let r = match api::date(date).await?.format_group(&group) {
      Ok(r) => r,
      Err(r) => r,
    };
    self.reply(r).await?;

    Ok(())
  }

  pub async fn dev_reply_user_list(&self) -> BotResult {
    let users = self.mongo.fetch_all().await?;
    let format = |u: &Settings| -> String {
      let r = match u.is_notifications_enabled {
        true => "[+] ",
        false => "[-] ",
      };

      format!(
        "{} {} [<a href=\"tg://user?id={}\">#{}</a>] —Å {}\n",
        r,
        u.group.as_ref().unwrap_or(&"-".into()),
        u.id,
        u.id,
        u.joined.to_chrono().format("%d/%m/%Y %H:%M:%S")
      )
    };

    let body = format!("–í—Å–µ–≥–æ: <b>{}</b>\n\n{}", users.len(), users.iter().map(format).collect::<String>());

    self.reply(body).await?;
    Ok(())
  }

  pub async fn dev_send_broadcast_agreement(&self, body: &String) -> BotResult {
    if body.is_empty() {
      return self.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ").await.map(|_| ());
    }
    let buttons = vec![vec![Callback::button("X", CallbackKind::Del), Callback::button("OK", CallbackKind::SendBroadcast)]];
    let reply_markup = InlineKeyboardMarkup::new(buttons);
    self
      .send_message(self.user_id(), body)
      .reply_markup(reply_markup)
      .await?;

    self
      .send_message(self.user_id(), format!("–ü—Ä–µ–≤—å—é:\n{}", body))
      .parse_mode(ParseMode::Html)
      .reply_markup(InlineKeyboardMarkup::new(vec![vec![Callback::button("X", CallbackKind::Del)]]))
      .await?;
    Ok(())
  }
}
