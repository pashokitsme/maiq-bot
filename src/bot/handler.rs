use chrono::{Datelike, NaiveDate};
use reqwest::Url;
use std::ops::Deref;
use teloxide::{
  payloads::SendMessageSetters,
  requests::Requester,
  types::{ChatId, InlineKeyboardButton, InlineKeyboardMarkup, Message, ParseMode, User, UserId},
  Bot,
};

use super::{format::DefaultFormatter, Command};
use crate::{api, bot::BotResult, db::MongoPool, error::BotError};

pub struct Context {
  bot: Bot,
  pub msg: Message,
  pub user: User,
  pub used_command: Command,
  pub mongo: MongoPool,
}

impl Deref for Context {
  type Target = Bot;

  fn deref(&self) -> &Self::Target {
    &self.bot
  }
}

impl Context {
  pub fn new(bot: Bot, msg: Message, cmd: Command, mongo: MongoPool) -> Self {
    Self { bot, user: msg.from().unwrap().clone(), msg, used_command: cmd, mongo }
  }

  pub fn chat_id(&self) -> ChatId {
    self.msg.chat.id
  }

  pub fn user_id(&self) -> UserId {
    self.msg.from().and_then(|f| Some(f.id)).unwrap_or(UserId(0))
  }

  pub async fn reply<T: Into<String>>(&self, text: T) -> Result<(), BotError> {
    self
      .bot
      .send_message(self.chat_id(), text)
      .parse_mode(ParseMode::Html)
      .disable_web_page_preview(true)
      .await?;
    Ok(())
  }

  pub async fn start_n_init(&self) -> BotResult {
    self.mongo.get_or_new(self.user_id()).await?;
    let username = &self.user.first_name;
    self
      .reply(format!(
        r#"–ü—Ä–∏–≤–µ—Ç, <b>{username}</b>! üéâ
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —á—Ç–æ-—Ç–æ —Ç–∏–ø–æ –±–µ—Ç—ã.
–ñ–µ–ª–∞–µ—à—å –ø–æ–º–æ—á—å? –í /about –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ç—Ö–∞–±.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/–±–∞–≥–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏ <a href="https://t.me/pashokitsme">–µ–º—É</a>.

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º, —Å—Å—ã–ª–∫–∏:
<b>/about</b>"#
      ))
      .await?;
    Ok(())
  }

  pub async fn reply_about(&self) -> BotResult {
    macro_rules! url_buttons_column {
      ($(($name: literal, $url: literal)),*) => {
        InlineKeyboardMarkup::new(vec![$(vec![InlineKeyboardButton::url($name, Url::parse($url).unwrap()); 1]),*])
      };
    }

    let markup = url_buttons_column!(("API docs", "https://github.com/pashokitsme/maiq-web-api"));

    self
      .send_message(
        self.chat_id(),
        r#"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

¬∑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_group. 
–í –∞—Ä–≥—É–º–µ–Ω—Ç–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. 

¬∑ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏
    /toggle_notifications.

¬∑ [<code>g5q98alka3</code>] - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–Ω–∞–ø—à–æ—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –ø–æ –Ω–µ–º—É –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –í –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –æ—Å—Ç–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Å–Ω–∞–ø—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏, –¥—Ä—É–≥–∏–µ —Ç–µ–ø–µ—Ä—å (–ø–æ—Å–ª–µ 29.01.23) –∑–∞–º–µ–Ω—è—é—Ç—Å—è.

¬∑ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –ª–µ–∂–∏—Ç –Ω–∞ <a href="https://github.com/pashokitsme">–≥–∏—Ç—Ö–∞–±–µ</a> –∏ —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ —Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
    1. <a href="https://github.com/pashokitsme/maiq-parser">–ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</a>.
    2. <a href="https://github.com/pashokitsme/maiq-web-api">–ë–µ–∫–µ–Ω–¥</a>.
    –ö—Å—Ç–∞—Ç–∏, API –ø—É–±–ª–∏—á–Ω–æ–µ (–Ω–æ —Å–µ—Ä–≤–µ—Ä, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–¥–µ-—Ç–æ –≤ us west) - –µ—Å–ª–∏ –±—É–¥–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, <a href="https://t.me/pashokitsme">–ø–∏—à–∏—Ç–µ</a>, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∂–µ.
    3. <a href="https://github.com/pashokitsme/maiq-bot">–ë–æ—Ç</a>.

–ñ–¥—É –ø—É–ª–ª —Ä–µ–∫–≤–µ—Å—Ç—ã –∏/–∏–ª–∏ –∑–≤—ë–∑–¥–æ—á–∫–∏! üåü
"#,
      )
      .parse_mode(ParseMode::Html)
      .reply_markup(markup)
      .await?;
    Ok(())
  }

  pub async fn toggle_notifications(&self) -> BotResult {
    let mut user = self.mongo.get_or_new(self.user_id()).await?;
    user.is_notifications_enabled = !user.is_notifications_enabled;
    self.mongo.update(&user).await?;
    self.reply(format!("{}", user.is_notifications_enabled)).await?;
    Ok(())
  }

  pub async fn set_group(&self, group: &String) -> BotResult {
    if group.is_empty() || group.len() > 10 {
      return Err(BotError::invalid_command("/set_group", "/set_group [–≥—Ä—É–ø–ø–∞: –¥–ª–∏–Ω–∞ &lt; 10]", "/set_group –ò—Ä3-21"));
    }

    let mut user = self.mongo.get_or_new(self.user_id()).await?;
    user.group = Some(group.clone());
    user.is_notifications_enabled = true;
    self.mongo.update(&user).await?;
    self
      .reply(format!("–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞: <code>{}</code>", user.group.unwrap()))
      .await?;
    Ok(())
  }

  pub async fn reply_default(&self, date: NaiveDate) -> BotResult {
    match self.mongo.get_or_new(self.user_id()).await?.group {
      Some(g) => self.reply(api::default(g, date.weekday()).await.format(date)).await,
      None => self.reply("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É").await.map(|_| ()),
    }
  }
}
